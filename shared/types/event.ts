/**
 * Represents an event, combining database fields with frontend-specific formatted fields.
 */
export interface EventType {
  // --- Core Database Fields (Raw ISO Strings from DB) ---
  event_id: string;                // UUID, Primary Key
  slug: string;                    // URL-friendly identifier
  event_start: string;             // ISO String from DB timestamptz
  event_end: string | null;        // ISO String from DB timestamptz (or null)

  // --- Function Relationship (REQUIRED) ---
  function_id: string;             // Foreign key to functions table
  functionName: string;            // Name of the parent function (derived)
  functionSlug: string;            // Slug of the parent function (derived)

  // --- Other Database Fields ---
  title: string | null;
  description: string | null;
  location_id: string | null;      // Foreign key to locations table
  type: string | null;             // Event category (e.g., 'Ceremony', 'Social')
  // price and maxAttendees removed from database schema
  // Pricing now comes from event_tickets table
  // Capacity now handled separately
  featured: boolean | null;        // Featured on homepage/listings
  image_url: string | null;        // URL for the event image

  // --- Additional Database Fields ---
  is_multi_day: boolean | null;            // If the event spans multiple days
  event_includes: string[] | null;         // List of items included
  important_information: string[] | null;  // List of important notes
  is_purchasable_individually: boolean | null; // Can this event be bought outside a package?
  created_at: string;                      // Timestamp
  organiser_id: string | null;             // Foreign key to organisations table
  
  // --- Event Details ---
  dress_code?: string | null;              // Dress code requirement
  regalia?: string | null;                 // Regalia requirement
  max_attendees?: number | null;           // Maximum attendees
  is_published?: boolean | null;           // Publication status

  // --- Deprecated Raw Fields (Commented Out) ---
  // date?: string | null;          // Use eventStart
  // start_time?: string | null;    // Use eventStart
  // end_time?: string | null;      // Use eventEnd
  // end_date?: string | null;      // Use eventEnd

  // --- Frontend-Specific Formatted Fields (Derived by formatEventForDisplay) ---
  day?: string;                     // e.g., "Sunday, 27 April 25"
  date?: string;                    // e.g., "27-04-2025"
  time?: string;                    // e.g., "06:00 PM"
  until?: string;                   // ADDED: e.g., "09:00 PM"
  imageSrc?: string;                // Optional alias for imageUrl
  
  // --- Potentially Redundant Formatted Fields (Check Usage) ---
  // These might be derivable from event_start/event_end now
  startTimeFormatted?: string;      // e.g., "19:00"
  endTimeFormatted?: string;        // e.g., "21:00"
  
  // --- Pricing Information ---
  minPrice?: number | null;         // Minimum ticket price for the event (from ticket_definitions)
  price?: string | null;            // Formatted price string for display (e.g., "From $20" or "$0")
}

// Note: These fields are generated by frontend formatters from eventStart and eventEnd
// These are not stored in the database but are calculated at runtime for display purposes.

/**
 * Represents the summarized data for a specific day used in the overview section.
 */
export interface EventDayOverviewType {
  event_id: string;
  date: string; // YYYY-MM-DD  
  name: string; // Day title/theme
  featuredEventsSummary?: string | null; // Pre-formatted summary string
}

/**
 * Represents a function which groups multiple events.
 */
export interface FunctionType {
  function_id: string;
  name: string;
  slug: string;
  description: string | null;
  image_url: string | null;
  start_date: string;              // ISO String from DB date
  end_date: string;                // ISO String from DB date
  location_id: string | null;
  organiser_id: string;
  events: EventType[];             // Events belonging to this function (derived)
  packages: PackageType[];         // Packages available for this function (derived)
  registrationCount: number;       // Number of registrations (derived)
  metadata: Record<string, any>;   // Additional metadata
  minPrice?: number;               // Minimum price across all events/packages (derived)
  durationDays?: number;           // Number of days the function spans (derived)
  location?: {                    // Location details (derived)
    location_id: string;
    place_name: string;
    suburb: string;
    state: string;
  };
}

/**
 * Represents a package for a function.
 */
export interface PackageType {
  package_id: string;
  name: string;
  description: string | null;
  package_price: number;
  original_price: number | null;
  discount: number | null;
  included_items: any | null;      // Maps to included_items composite type
  includes_description: string[] | null;
  function_id: string;
  is_active: boolean | null;
}