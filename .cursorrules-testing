# Testing Patterns

## Testing Hierarchy
```
Unit Tests → Integration Tests → E2E Tests
   Fast           Balanced          Slow
   Many           Moderate           Few
```

## Server Component Testing
```typescript
// CORRECT: Test server components
import { render } from '@testing-library/react'
import Page from '@/app/page'

test('renders page content', async () => {
  const jsx = await Page()
  const { getByText } = render(jsx)
  expect(getByText('Welcome')).toBeInTheDocument()
})
```

## Client Component Testing
```typescript
// CORRECT: Test client interactions
import { render, fireEvent } from '@testing-library/react'
import { Button } from '@/components/ui/button'

test('handles click', () => {
  const onClick = jest.fn()
  const { getByRole } = render(
    <Button onClick={onClick}>Click me</Button>
  )
  
  fireEvent.click(getByRole('button'))
  expect(onClick).toHaveBeenCalled()
})
```

## Testing Rules
- Test behavior, not implementation
- Mock external dependencies
- Use data-testid sparingly
- Maintain test coverage above 80%
- Run tests in CI/CD pipeline