"use client"

import { useState, useMemo, useEffect } from "react"
import { useRegistrationStore, UnifiedAttendeeData, PackageSelectionType } from '../../../lib/registrationStore'
import { useLocationStore } from '../../../lib/locationStore'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"
import { Check, ChevronRight, CreditCard, Info, Ticket, User, Users, Edit3, Trash2, AlertTriangle, HelpCircle } from "lucide-react"
import type { Attendee, MasonAttendee, GuestAttendee, PartnerAttendee, PARTNER_RELATIONSHIP_OPTIONS } from "@/lib/registration-types"
import { PhoneInput } from '@/components/ui/phone-input'
import { ScrollArea } from "@/components/ui/scroll-area"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { SectionHeader } from "../registration/SectionHeader"
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogDescription, 
  DialogFooter,
  DialogTrigger 
} from "@/components/ui/dialog"
import { 
  AlertDialog, 
  AlertDialogAction, 
  AlertDialogCancel, 
  AlertDialogContent, 
  AlertDialogDescription, 
  AlertDialogFooter, 
  AlertDialogHeader, 
  AlertDialogTitle 
} from "@/components/ui/alert-dialog"
import { default as MasonForm } from "../forms/mason/MasonForm"
import { default as GuestForm } from "../forms/guest/GuestForm"
import ContactConfirmationMessage from "../ui/ContactConfirmationMessage"

// Sample ticket types and packages - these should ideally be imported from a shared location
// For now, defining minimal versions here for type safety in ticket derivation logic
const ticketTypesMinimal = [
  { id: "installation", name: "Installation Ceremony", price: 75 },
  { id: "banquet", name: "Grand Banquet", price: 150 },
  { id: "brunch", name: "Farewell Brunch", price: 45 },
  { id: "tour", name: "City Tour", price: 60 },
];
const ticketPackagesMinimal = [
  { id: "complete", name: "Complete Package", price: 250, includes: ["installation", "banquet", "brunch", "tour"] },
  { id: "ceremony-banquet", name: "Ceremony & Banquet", price: 200, includes: ["installation", "banquet"] },
  { id: "social", name: "Social Package", price: 180, includes: ["banquet", "brunch", "tour"] },
];

export function OrderReviewStep() {
  const registrationType = useRegistrationStore((s) => s.registrationType);
  const allStoreAttendees = useRegistrationStore((s) => s.attendees);
  
  const primaryAttendee = useMemo(() => 
    allStoreAttendees.find(att => att.isPrimary) as UnifiedAttendeeData | undefined, 
    [allStoreAttendees]
  );
  const otherAttendees = useMemo(() => 
    allStoreAttendees.filter(att => !att.isPrimary) as UnifiedAttendeeData[], 
    [allStoreAttendees]
  );

  const removeAttendeeStore = useRegistrationStore((s) => s.removeAttendee);
  const goToNextStep = useRegistrationStore((s) => s.goToNextStep);
  const goToPrevStep = useRegistrationStore((s) => s.goToPrevStep);
  const updateAttendeeStore = useRegistrationStore((s) => s.updateAttendee);

  // Create an ordering helper outside of any hooks to avoid conditional hook execution
  const getOrderedAttendees = (primary: UnifiedAttendeeData | undefined, others: UnifiedAttendeeData[], allAttendees: UnifiedAttendeeData[]): UnifiedAttendeeData[] => {
    const orderedAttendees: UnifiedAttendeeData[] = [];
    
    // Add primary attendee first if it exists
    if (primary) {
      orderedAttendees.push(primary);
      
      // If primary attendee has a partner, add it immediately after
      if (primary.partner) {
        const primaryPartner = others.find(att => att.attendeeId === primary.partner);
        if (primaryPartner) {
          orderedAttendees.push(primaryPartner);
        }
      }
    }
    
    // For remaining attendees, add each one followed by their partner if they have one
    const remainingAttendees = others.filter(att => {
      // Skip attendees that are partners of others (they'll be added with their related attendee)
      if (att.isPartner && (att.attendeeId === primary?.partner || 
          others.some(otherAtt => otherAtt.partner === att.attendeeId))) {
        return false;
      }
      // Skip primary's partner as it's already added
      if (primary && primary.partner === att.attendeeId) {
        return false;
      }
      return true;
    });
    
    // Add each remaining attendee followed by their partner
    for (const attendee of remainingAttendees) {
      orderedAttendees.push(attendee);
      
      // If this attendee has a partner, add it immediately after
      if (attendee.partner) {
        const partner = allAttendees.find(att => att.attendeeId === attendee.partner);
        if (partner) {
          orderedAttendees.push(partner);
        }
      }
    }
    
    return orderedAttendees;
  };
  
  // Now use the helper function inside useMemo to maintain proper hook ordering
  const attendeesForDisplay: UnifiedAttendeeData[] = useMemo(() => 
    getOrderedAttendees(primaryAttendee, otherAttendees, allStoreAttendees)
  , [primaryAttendee, otherAttendees, allStoreAttendees]);

  const [currentTickets, setCurrentTickets] = useState<Array<any & { attendeeId: string; price: number; name: string; description?: string; isPackage?: boolean }>>([]);

  useEffect(() => {
    const derivedTickets = allStoreAttendees.flatMap(attendee => {
        if (!attendee.ticket) return [];
        const { ticketDefinitionId, selectedEvents } = attendee.ticket;
        const attendeeId = attendee.attendeeId;
        let tickets: Array<any & { attendeeId: string; price: number; name: string; description?: string; isPackage?: boolean }> = [];

        if (ticketDefinitionId) {
            const pkgInfo = ticketPackagesMinimal.find(p => p.id === ticketDefinitionId);
            if (pkgInfo) {
                tickets.push({ 
                    id: `${attendeeId}-${pkgInfo.id}`, 
                    name: pkgInfo.name, 
                    price: pkgInfo.price, 
                    attendeeId, 
                    isPackage: true,
                    description: `Package including: ${pkgInfo.includes.join(", ")}`
                });
            }
        } else {
            selectedEvents?.forEach(eventId => {
                const eventInfo = ticketTypesMinimal.find(e => e.id === eventId);
                if (eventInfo) {
                    tickets.push({ 
                        id: `${attendeeId}-${eventInfo.id}`, 
                        name: eventInfo.name, 
                        price: eventInfo.price, 
                        attendeeId, 
                        isPackage: false,
                        description: `Individual ticket for ${eventInfo.name}`
                    });
                }
            });
        }
        return tickets;
    });
    setCurrentTickets(derivedTickets);
    // console.log("[OrderReviewStep] Derived tickets for display:", derivedTickets);
  }, [allStoreAttendees]);

  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingAttendee, setEditingAttendee] = useState<{ attendeeData: UnifiedAttendeeData; index: number } | null>(null);
  const [isRemoveConfirmOpen, setIsRemoveConfirmOpen] = useState(false);
  const [removingAttendeeId, setRemovingAttendeeId] = useState<string | null>(null);

  const getAttendeeTickets = (attendeeId: string) => {
    return currentTickets.filter((ticket) => ticket.attendeeId === attendeeId)
  }

  const getAttendeeTotal = (attendeeId: string) => {
    return getAttendeeTickets(attendeeId).reduce((sum, ticket) => sum + ticket.price, 0)
  }

  const totalAmount = currentTickets.reduce((sum, ticket) => sum + ticket.price, 0)
  const totalTickets = currentTickets.length

  const getMasonicTitle = (attendee: UnifiedAttendeeData) => {
    return attendee.title || "";
  }

  const getAttendeeTypeLabel = (attendee: UnifiedAttendeeData): string => {
    if (attendee.isPrimary) return "Primary";
    if (attendee.attendeeType === 'mason') return "Mason";
    if (attendee.isPartner) {
      return attendee.partnerType === 'lady' ? "Lady Partner" : "Guest Partner";
    }
    if (attendee.attendeeType === 'guest') return "Guest";
    return "Attendee";
  };

  const openEditModal = (attendeeData: UnifiedAttendeeData, index: number) => {
    setEditingAttendee({ attendeeData, index });
    setIsEditModalOpen(true);
  }

  const handleUpdateAttendee = (updatedData: Partial<UnifiedAttendeeData>) => {
    if (editingAttendee?.attendeeData.attendeeId) {
      updateAttendeeStore(editingAttendee.attendeeData.attendeeId, updatedData);
    }
    setIsEditModalOpen(false);
    setEditingAttendee(null);
  };

  const openRemoveConfirm = (attendeeId: string) => {
    setRemovingAttendeeId(attendeeId);
    setIsRemoveConfirmOpen(true);
  }

  const handleConfirmRemoveAttendee = () => {
    if (removingAttendeeId) {
      updateAttendeeStore(removingAttendeeId, { ticket: { ticketDefinitionId: null, selectedEvents: [] } });
      removeAttendeeStore(removingAttendeeId);
    }
    setIsRemoveConfirmOpen(false);
    setRemovingAttendeeId(null);
    setEditingAttendee(null);
  }

  return (
    <div className="space-y-6">
      <SectionHeader>
        <h1 className="text-2xl font-bold text-masonic-navy">Review Your Order</h1>
        <div className="masonic-divider"></div>
        <p className="text-gray-600">Please review your registration details before proceeding to payment</p>
      </SectionHeader>

      <Card className="border-masonic-navy">
        <CardHeader className="bg-masonic-navy text-white">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center">
              <Users className="mr-2 h-5 w-5" /> Registration Details
            </CardTitle>
            {registrationType && (
                <Badge variant="outline" className="bg-white/10 text-white">
                  {registrationType.charAt(0).toUpperCase() + registrationType.slice(1)}
                </Badge>
            )}
          </div>
          <CardDescription className="text-gray-200">
            {attendeesForDisplay.length} {attendeesForDisplay.length === 1 ? "Attendee" : "Attendees"} • {totalTickets}{" "}
            {totalTickets === 1 ? "Ticket" : "Tickets"}
          </CardDescription>
        </CardHeader>
        <CardContent className="p-6 space-y-6">
          {attendeesForDisplay.length === 0 && (
            <Alert className="border-yellow-500 bg-yellow-50">
                <AlertTriangle className="h-4 w-4 text-yellow-700" />
                <AlertDescription className="text-yellow-700">
                    No attendees have been added to this registration yet.
                </AlertDescription>
            </Alert>
          )}
          {attendeesForDisplay.map((attendee, index) => {
            const ticketsForThisAttendee = getAttendeeTickets(attendee.attendeeId);
            const attendeeSubTotal = getAttendeeTotal(attendee.attendeeId);

            return (
              <Card key={attendee.attendeeId} className="border-masonic-lightgold overflow-hidden">
                <CardHeader className="bg-masonic-lightgold/10 p-4">
                  <div className="flex items-center justify-between">
                    <div>
                        <CardTitle className="text-lg text-masonic-navy">
                        {getMasonicTitle(attendee)} {attendee.firstName} {attendee.lastName}
                        </CardTitle>
                        <CardDescription>
                        {attendee.isPrimary ? "Primary Attendee" : `Additional Attendee`}
                         - ({getAttendeeTypeLabel(attendee)})
                        </CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                        <Button variant="outline" size="sm" onClick={() => openEditModal(attendee, index)} className="h-8 px-2">
                            <Edit3 className="mr-1 h-3 w-3" /> Edit
                        </Button>
                        {!attendee.isPrimary && (
                            <Button variant="destructive" size="sm" onClick={() => openRemoveConfirm(attendee.attendeeId)} className="h-8 px-2">
                                <Trash2 className="mr-1 h-3 w-3" /> Remove
                            </Button>
                        )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="p-4 space-y-3">
                  {attendee.dietaryRequirements && (
                    <p className="text-sm"><span className="font-medium">Dietary:</span> {attendee.dietaryRequirements}</p>
                  )}
                  {attendee.specialNeeds && (
                    <p className="text-sm"><span className="font-medium">Special Needs:</span> {attendee.specialNeeds}</p>
                  )}
                  {attendee.attendeeType === "mason" && attendee.lodgeNameNumber && (
                     <p className="text-sm"><span className="font-medium">Lodge:</span> {attendee.lodgeNameNumber}</p>
                  )}
                  {/* Commenting out linked partner display to avoid type errors for now 
                  {(attendee.attendeeType === "mason" || attendee.attendeeType === "guest") && attendee.relatedAttendeeId && (
                     // Logic to find and display related partner based on relatedAttendeeId would go here
                     // This requires a re-evaluation of how partner data is structured and accessed.
                     // <div className="mt-2 p-2 border rounded-md bg-slate-50 text-sm">
                     //     <p><span className="font-medium">Linked Partner:</span> ... </p>
                     // </div>
                  )} */}
                  
                  <Separator className="my-3"/>

                  <h4 className="font-medium text-masonic-navy">Tickets for this Attendee:</h4>
                  {ticketsForThisAttendee.length === 0 ? (
                    <p className="text-sm text-gray-500 italic">No tickets selected for this attendee.</p>
                  ) : (
                    <ul className="space-y-2">
                      {ticketsForThisAttendee.map(ticket => (
                        <li key={ticket.id} className="flex justify-between items-center text-sm p-2 rounded-md border bg-white">
                          <div>
                            <p className="font-medium">{ticket.name}</p>
                            {ticket.description && <p className="text-xs text-gray-500">{ticket.description}</p>}
                          </div>
                          <div className="flex items-center gap-2">
                            <span>${ticket.price.toFixed(2)}</span>
                            <Button variant="ghost" size="icon" 
                                onClick={() => {                                  
                                  const currentAttendeeTicketData = allStoreAttendees.find(a => a.attendeeId === ticket.attendeeId)?.ticket || { ticketDefinitionId: null, selectedEvents: [] };
                                  let updatedTicketSelection: PackageSelectionType;
                                  if (ticket.isPackage) {
                                    updatedTicketSelection = { ticketDefinitionId: null, selectedEvents: [] };
                                  } else {
                                    const originalTicketTypeId = ticket.id.substring(ticket.attendeeId.length + 1);
                                    updatedTicketSelection = {
                                      ticketDefinitionId: null,
                                      selectedEvents: currentAttendeeTicketData.selectedEvents.filter(id => id !== originalTicketTypeId)
                                    };
                                  }
                                  updateAttendeeStore(ticket.attendeeId, { ticket: updatedTicketSelection });
                                }}
                                className="h-7 w-7 text-red-500 hover:text-red-700">
                                <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </li>
                      ))}
                    </ul>
                  )}
                  <Separator className="my-3"/>
                  <div className="flex justify-end items-center font-bold text-masonic-navy">
                      <span>Attendee Subtotal: ${attendeeSubTotal.toFixed(2)}</span>
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </CardContent>
        <CardFooter className="flex flex-col space-y-4 bg-gray-50 p-6">
          <div className="flex w-full items-center justify-between rounded-lg bg-masonic-navy p-4 text-white">
            <span className="text-lg font-bold">Total Amount</span>
            <span className="text-xl font-bold">${totalAmount.toFixed(2)}</span>
          </div>

          <Alert className="border-masonic-gold bg-masonic-gold/10">
            <Info className="h-4 w-4 text-masonic-navy" />
            <AlertDescription className="text-masonic-navy">
              Please review all details carefully. You will be asked to provide payment information in the next step.
            </AlertDescription>
          </Alert>

          <div className="flex w-full justify-between">
            <Button
              variant="outline"
              onClick={goToPrevStep}
              className="border-masonic-navy text-masonic-navy hover:bg-masonic-lightblue"
            >
              Previous
            </Button>
            <Button 
                onClick={goToNextStep} 
                className="bg-masonic-gold text-masonic-navy hover:bg-masonic-lightgold"
                disabled={attendeesForDisplay.length === 0 || totalTickets === 0}
            >
              <CreditCard className="mr-2 h-4 w-4" />
              Proceed to Payment
              <ChevronRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
        </CardFooter>
      </Card>

      {/* Initialize form state variables outside conditionals to avoid hook order errors */}
      {/* Mason form state */}
      const [masonFormValues, setMasonFormValues] = useState({
        title: '',
        firstName: '',
        lastName: '',
        rank: '',
        grandOffice: '',
        grandRank: '',
        grandLodgeId: null,
        lodgeId: null,
        lodgeNameNumber: '',
        primaryPhone: '',
        primaryEmail: '',
        contactPreference: '',
        dietaryRequirements: '',
        specialNeeds: ''
      });
      
      // Location state variables for Mason form
      const [selectedGrandLodge, setSelectedGrandLodge] = useState(null);
      const [grandLodgeInputValue, setGrandLodgeInputValue] = useState('');
      const [selectedLodge, setSelectedLodge] = useState(null);
      const [lodgeInputValue, setLodgeInputValue] = useState('');
      const [grandLodges, setGrandLodges] = useState([]);
      const [lodgeOptions, setLodgeOptions] = useState([]);
      
      // Lady Partner form state
      const [ladyPartnerFormValues, setLadyPartnerFormValues] = useState({
        relationship: '',
        title: '',
        firstName: '',
        lastName: '',
        contactPreference: '',
        primaryPhone: '',
        primaryEmail: '',
        dietaryRequirements: '',
        specialNeeds: ''
      });
      
      // Guest Partner form state
      const [guestPartnerFormValues, setGuestPartnerFormValues] = useState({
        relationship: '',
        title: '',
        firstName: '',
        lastName: '',
        contactPreference: '',
        primaryPhone: '',
        primaryEmail: '',
        dietaryRequirements: '',
        specialNeeds: ''
      });
      
      // Fetch functions for Mason form outside conditionals
      const fetchInitialGrandLodges = useLocationStore((state) => state.fetchInitialGrandLodges);
      const searchAllLodgesAction = useLocationStore((state) => state.searchAllLodgesAction);
      
      // Effect to update Mason form values when attendee data changes
      useEffect(() => {
        if (editingAttendee && editingAttendee.attendeeData.attendeeType.toLowerCase() === "mason") {
          setMasonFormValues({
            title: editingAttendee.attendeeData.title || '',
            firstName: editingAttendee.attendeeData.firstName || '',
            lastName: editingAttendee.attendeeData.lastName || '',
            rank: editingAttendee.attendeeData.rank || '',
            grandOffice: editingAttendee.attendeeData.grandOffice || '',
            grandRank: editingAttendee.attendeeData.grandRank || '',
            grandLodgeId: editingAttendee.attendeeData.grandLodgeId || null,
            lodgeId: editingAttendee.attendeeData.lodgeId || null,
            lodgeNameNumber: editingAttendee.attendeeData.lodgeNameNumber || '',
            primaryPhone: editingAttendee.attendeeData.primaryPhone || '',
            primaryEmail: editingAttendee.attendeeData.primaryEmail || '',
            contactPreference: editingAttendee.attendeeData.contactPreference || '',
            dietaryRequirements: editingAttendee.attendeeData.dietaryRequirements || '',
            specialNeeds: editingAttendee.attendeeData.specialNeeds || ''
          });
          
          // Load grand lodges when Mason form is active
          const loadGrandLodges = async () => {
            const result = await fetchInitialGrandLodges();
            setGrandLodges(result || []);
            
            // If we have a grandLodgeId, try to select it
            if (editingAttendee.attendeeData.grandLodgeId && result) {
              const matchingGrandLodge = result.find(gl => gl.id === editingAttendee.attendeeData.grandLodgeId);
              if (matchingGrandLodge) {
                setSelectedGrandLodge(matchingGrandLodge);
                setGrandLodgeInputValue(matchingGrandLodge.name);
              }
            }
          };
          loadGrandLodges();
        }
      }, [editingAttendee, fetchInitialGrandLodges]);
      
      // Effect to load lodge data when grand lodge is selected
      useEffect(() => {
        if (editingAttendee && editingAttendee.attendeeData.attendeeType.toLowerCase() === "mason" && selectedGrandLodge) {
          const loadLodgeData = async () => {
            if (selectedGrandLodge.id) {
              try {
                const lodges = await searchAllLodgesAction('', selectedGrandLodge.id);
                setLodgeOptions(lodges || []);
                
                // If we have a lodgeId, try to select it
                if (editingAttendee.attendeeData.lodgeId && lodges) {
                  const matchingLodge = lodges.find(l => l.id === editingAttendee.attendeeData.lodgeId);
                  if (matchingLodge) {
                    setSelectedLodge(matchingLodge);
                    setLodgeInputValue(matchingLodge.display_name || `${matchingLodge.name} No. ${matchingLodge.number || 'N/A'}`);
                  } else if (editingAttendee.attendeeData.lodgeNameNumber) {
                    // If lodge not found but we have a name, show it
                    setLodgeInputValue(editingAttendee.attendeeData.lodgeNameNumber);
                  }
                }
              } catch (error) {
                console.error("Error loading lodges:", error);
              }
            }
          };
          loadLodgeData();
        }
      }, [selectedGrandLodge, searchAllLodgesAction, editingAttendee]);
      
      // Effect to update Lady Partner form values
      useEffect(() => {
        if (editingAttendee && (editingAttendee.attendeeData.attendeeType.toLowerCase() === "ladypartner" || 
            (editingAttendee.attendeeData.isPartner && editingAttendee.attendeeData.partnerType === 'lady'))) {
          setLadyPartnerFormValues({
            relationship: editingAttendee.attendeeData.relationship || '',
            title: editingAttendee.attendeeData.title || '',
            firstName: editingAttendee.attendeeData.firstName || '',
            lastName: editingAttendee.attendeeData.lastName || '',
            contactPreference: editingAttendee.attendeeData.contactPreference || '',
            primaryPhone: editingAttendee.attendeeData.primaryPhone || '',
            primaryEmail: editingAttendee.attendeeData.primaryEmail || '',
            dietaryRequirements: editingAttendee.attendeeData.dietaryRequirements || '',
            specialNeeds: editingAttendee.attendeeData.specialNeeds || ''
          });
        }
      }, [
        editingAttendee
      ]);
      
      // Effect to update Guest Partner form values
      useEffect(() => {
        if (editingAttendee && (editingAttendee.attendeeData.attendeeType.toLowerCase() === "guestpartner" || 
            (editingAttendee.attendeeData.isPartner && editingAttendee.attendeeData.partnerType === 'guest'))) {
          setGuestPartnerFormValues({
            relationship: editingAttendee.attendeeData.relationship || '',
            title: editingAttendee.attendeeData.title || '',
            firstName: editingAttendee.attendeeData.firstName || '',
            lastName: editingAttendee.attendeeData.lastName || '',
            contactPreference: editingAttendee.attendeeData.contactPreference || '',
            primaryPhone: editingAttendee.attendeeData.primaryPhone || '',
            primaryEmail: editingAttendee.attendeeData.primaryEmail || '',
            dietaryRequirements: editingAttendee.attendeeData.dietaryRequirements || '',
            specialNeeds: editingAttendee.attendeeData.specialNeeds || ''
          });
        }
      }, [
        editingAttendee
      ]);
      
      {isEditModalOpen && editingAttendee && (
          <Dialog open={isEditModalOpen} onOpenChange={(isOpen) => { if (!isOpen) { setIsEditModalOpen(false); setEditingAttendee(null); } else { setIsEditModalOpen(true); } }}>
              <DialogContent className="sm:max-w-xl md:max-w-3xl lg:max-w-4xl max-h-[90vh] overflow-y-auto p-0">
                  <DialogHeader className="p-6 pb-0">
                      <DialogTitle>Edit Attendee: {editingAttendee.attendeeData.firstName} {editingAttendee.attendeeData.lastName}</DialogTitle>
                      <DialogDescription>
                          Make changes to the attendee details below. Ensure all mandatory fields are completed.
                      </DialogDescription>
                  </DialogHeader>
                  <div className="p-6">
                      {/* Main forms based on attendee type */}
                      {editingAttendee.attendeeData.attendeeType.toLowerCase() === "mason" && (() => {
                          // Use titles and ranks for Mason form 
                          const titles = ["Bro", "W Bro", "VW Bro", "RW Bro", "MW Bro"];
                          const ranks = [
                            { value: "EAF", label: "EAF" },
                            { value: "FCF", label: "FCF" },
                            { value: "MM", label: "MM" },
                            { value: "IM", label: "IM" },
                            { value: "GL", label: "GL" }
                          ];
                          
                          // Handler for updating both local state and store
                          const handleChange = (field, value) => {
                              // Update local state first for immediate UI response
                              setMasonFormValues(prev => ({
                                  ...prev,
                                  [field]: value
                              }));
                              
                              // Then update the store
                              updateAttendeeStore(editingAttendee.attendeeData.attendeeId, { [field]: value });
                          };
                          
                          // Special handler for title changes which impacts rank
                          const handleTitleChange = (e) => {
                              const newTitle = e.target.value;
                              const isGrandTitle = ["VW Bro", "RW Bro", "MW Bro"].includes(newTitle);
                              
                              // Update title in local state
                              setMasonFormValues(prev => ({
                                  ...prev,
                                  title: newTitle,
                                  // Update rank if needed based on title
                                  rank: isGrandTitle ? 'GL' : 
                                        newTitle === 'W Bro' ? 
                                        (prev.rank !== 'GL' ? 'IM' : prev.rank) : 
                                        prev.rank
                              }));
                              
                              // Update store
                              const updates = { 
                                  title: newTitle,
                                  ...(isGrandTitle ? { rank: 'GL' } : 
                                     newTitle === 'W Bro' ? 
                                     { rank: masonFormValues.rank !== 'GL' ? 'IM' : masonFormValues.rank } : 
                                     {})
                              };
                              
                              updateAttendeeStore(editingAttendee.attendeeData.attendeeId, updates);
                          };
                          
                          // Handler for Grand Lodge selection
                          const handleGrandLodgeSelect = (grandLodge) => {
                              setSelectedGrandLodge(grandLodge);
                              setGrandLodgeInputValue(grandLodge ? grandLodge.name : '');
                              
                              // Update local state
                              setMasonFormValues(prev => ({
                                  ...prev,
                                  grandLodgeId: grandLodge?.id || null,
                                  // Clear lodge when grand lodge changes
                                  lodgeId: null,
                                  lodgeNameNumber: ''
                              }));
                              
                              // Update store
                              updateAttendeeStore(editingAttendee.attendeeData.attendeeId, { 
                                  grandLodgeId: grandLodge?.id || null,
                                  lodgeId: null,
                                  lodgeNameNumber: null
                              });
                              
                              // Clear lodge selection
                              setSelectedLodge(null);
                              setLodgeInputValue('');
                          };
                          
                          // Handler for Lodge selection
                          const handleLodgeSelect = (lodge) => {
                              setSelectedLodge(lodge);
                              
                              if (lodge) {
                                  const displayValue = lodge.display_name || `${lodge.name} No. ${lodge.number || 'N/A'}`;
                                  setLodgeInputValue(displayValue);
                                  
                                  // Update local state
                                  setMasonFormValues(prev => ({
                                      ...prev,
                                      lodgeId: lodge.id,
                                      lodgeNameNumber: displayValue
                                  }));
                                  
                                  // Update store
                                  updateAttendeeStore(editingAttendee.attendeeData.attendeeId, { 
                                      lodgeId: lodge.id,
                                      lodgeNameNumber: displayValue
                                  });
                              } else {
                                  setLodgeInputValue('');
                                  
                                  // Update local state
                                  setMasonFormValues(prev => ({
                                      ...prev,
                                      lodgeId: null,
                                      lodgeNameNumber: ''
                                  }));
                                  
                                  // Update store
                                  updateAttendeeStore(editingAttendee.attendeeData.attendeeId, { 
                                      lodgeId: null,
                                      lodgeNameNumber: null
                                  });
                              }
                          };
                          
                          return (
                            <div className="bg-slate-50 p-6 rounded-lg mb-4">
                              {/* Basic Info */}
                              <div className="grid grid-cols-12 gap-4 mb-4">
                                <div className="col-span-2">
                                  <label className="block text-sm font-medium text-slate-700 mb-1">Title *</label>
                                  <select
                                    value={masonFormValues.title}
                                    onChange={handleTitleChange}
                                    className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                    required
                                  >
                                    <option value="" disabled>Select...</option>
                                    {titles.map(title => (
                                      <option key={title} value={title}>{title}</option>
                                    ))}
                                  </select>
                                </div>
                                <div className="col-span-5">
                                  <label className="block text-sm font-medium text-slate-700 mb-1">First Name *</label>
                                  <input
                                    type="text"
                                    value={masonFormValues.firstName}
                                    onChange={(e) => handleChange('firstName', e.target.value)}
                                    className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                    required
                                  />
                                </div>
                                <div className="col-span-5">
                                  <label className="block text-sm font-medium text-slate-700 mb-1">Last Name *</label>
                                  <input
                                    type="text"
                                    value={masonFormValues.lastName}
                                    onChange={(e) => handleChange('lastName', e.target.value)}
                                    className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                    required
                                  />
                                </div>
                              </div>
                              
                              {/* Rank */}
                              <div className="grid grid-cols-12 gap-4 mb-4">
                                <div className="col-span-3">
                                  <label className="block text-sm font-medium text-slate-700 mb-1">Rank *</label>
                                  <select
                                    value={masonFormValues.rank}
                                    onChange={(e) => handleChange('rank', e.target.value)}
                                    className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                    required
                                  >
                                    <option value="" disabled>Select...</option>
                                    {ranks.map(rank => (
                                      <option key={rank.value} value={rank.value}>{rank.label}</option>
                                    ))}
                                  </select>
                                </div>
                                
                                {/* Grand Lodge Fields */}
                                {masonFormValues.rank === 'GL' && (
                                  <>
                                    <div className="col-span-4">
                                      <label className="block text-sm font-medium text-slate-700 mb-1">Grand Rank</label>
                                      <input
                                        type="text"
                                        value={masonFormValues.grandRank}
                                        onChange={(e) => handleChange('grandRank', e.target.value)}
                                        className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                      />
                                    </div>
                                    <div className="col-span-5">
                                      <label className="block text-sm font-medium text-slate-700 mb-1">Grand Office</label>
                                      <input
                                        type="text"
                                        value={masonFormValues.grandOffice}
                                        onChange={(e) => handleChange('grandOffice', e.target.value)}
                                        className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                      />
                                    </div>
                                  </>
                                )}
                              </div>
                              
                              {/* Lodge Information */}
                              <div className="grid grid-cols-12 gap-4 mb-4">
                                <div className="col-span-6">
                                  <label className="block text-sm font-medium text-slate-700 mb-1">Grand Lodge *</label>
                                  <select
                                    value={masonFormValues.grandLodgeId || ''}
                                    onChange={(e) => {
                                      const selectedId = e.target.value;
                                      const selected = grandLodges.find(gl => gl.id === selectedId);
                                      handleGrandLodgeSelect(selected || null);
                                    }}
                                    className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                    required
                                  >
                                    <option value="" disabled>Select Grand Lodge...</option>
                                    {grandLodges.map(gl => (
                                      <option key={gl.id} value={gl.id}>{gl.name}</option>
                                    ))}
                                  </select>
                                </div>
                                
                                <div className="col-span-6">
                                  <label className="block text-sm font-medium text-slate-700 mb-1">Lodge *</label>
                                  <select
                                    value={masonFormValues.lodgeId || ''}
                                    onChange={(e) => {
                                      const selectedId = e.target.value;
                                      const selected = lodgeOptions.find(l => l.id === selectedId);
                                      handleLodgeSelect(selected || null);
                                    }}
                                    className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                    required
                                    disabled={!masonFormValues.grandLodgeId}
                                  >
                                    <option value="" disabled>Select Lodge...</option>
                                    {lodgeOptions.map(lodge => (
                                      <option key={lodge.id} value={lodge.id}>
                                        {lodge.display_name || `${lodge.name} No. ${lodge.number || 'N/A'}`}
                                      </option>
                                    ))}
                                  </select>
                                </div>
                              </div>
                              
                              {/* Contact Information */}
                              <div className="grid grid-cols-12 gap-4 mb-4">
                                <div className="col-span-4">
                                  <label className="block text-sm font-medium text-slate-700 mb-1">Contact *</label>
                                  <select
                                    value={masonFormValues.contactPreference}
                                    onChange={(e) => handleChange('contactPreference', e.target.value)}
                                    className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                    required
                                  >
                                    <option value="" disabled>Select...</option>
                                    <option value="Directly">Directly</option>
                                    {!editingAttendee.attendeeData.isPrimary && (
                                      <>
                                        <option value="PrimaryAttendee">Primary Mason</option>
                                        <option value="ProvideLater">Provide Later</option>
                                      </>
                                    )}
                                  </select>
                                </div>
                                
                                {masonFormValues.contactPreference === 'Directly' && (
                                  <>
                                    <div className="col-span-4">
                                      <label className="block text-sm font-medium text-slate-700 mb-1">Phone *</label>
                                      <PhoneInput
                                        value={masonFormValues.primaryPhone}
                                        onChange={(value) => handleChange('primaryPhone', value)}
                                        required
                                      />
                                    </div>
                                    <div className="col-span-4">
                                      <label className="block text-sm font-medium text-slate-700 mb-1">Email *</label>
                                      <input
                                        type="email"
                                        value={masonFormValues.primaryEmail}
                                        onChange={(e) => handleChange('primaryEmail', e.target.value)}
                                        className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                        required
                                      />
                                    </div>
                                  </>
                                )}
                              </div>
                              
                              {/* Additional Information */}
                              <div className="mb-4">
                                <label className="block text-sm font-medium text-slate-700 mb-1">Dietary Requirements</label>
                                <input
                                  type="text"
                                  value={masonFormValues.dietaryRequirements}
                                  onChange={(e) => handleChange('dietaryRequirements', e.target.value)}
                                  className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                  placeholder="E.g., vegetarian, gluten-free, allergies"
                                />
                              </div>
                              
                              <div>
                                <label className="block text-sm font-medium text-slate-700 mb-1">Special Needs</label>
                                <textarea
                                  value={masonFormValues.specialNeeds}
                                  onChange={(e) => handleChange('specialNeeds', e.target.value)}
                                  className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                  rows={2}
                                ></textarea>
                              </div>
                            </div>
                          );
                      })()}
                      {editingAttendee.attendeeData.attendeeType.toLowerCase() === "guest" && (
                          <GuestForm 
                              attendeeId={editingAttendee.attendeeData.attendeeId}
                              attendeeNumber={editingAttendee.index}
                              key={editingAttendee.attendeeData.attendeeId}
                          />
                      )}
                      
                      {/* Lady Partner Form - Full Featured Implementation with Local State */}
                      {(editingAttendee.attendeeData.attendeeType.toLowerCase() === "ladypartner" || 
                        (editingAttendee.attendeeData.isPartner && editingAttendee.attendeeData.partnerType === 'lady')) && (() => {
                          // Handler for updating both local state and store
                          const handleChange = (field, value) => {
                              // Update local state first for immediate UI response
                              setLadyPartnerFormValues(prev => ({
                                  ...prev,
                                  [field]: value
                              }));
                              
                              // Then update the store
                              updateAttendeeStore(editingAttendee.attendeeData.attendeeId, { [field]: value });
                          };

                          const getLadyPartnerConfirmationMessage = () => {
                            if (ladyPartnerFormValues.contactPreference === 'PrimaryAttendee') {
                              const relatedAtt = allStoreAttendees.find((a: UnifiedAttendeeData) => a.attendeeId === editingAttendee.attendeeData.relatedAttendeeId);
                              return `${relatedAtt?.firstName || ''} ${relatedAtt?.lastName || ''}`.trim() + " will be responsible for all communication with this attendee.";
                            }
                            if (ladyPartnerFormValues.contactPreference === 'ProvideLater') {
                              const relatedAtt = allStoreAttendees.find((a: UnifiedAttendeeData) => a.attendeeId === editingAttendee.attendeeData.relatedAttendeeId);
                              return `${relatedAtt?.firstName || ''} ${relatedAtt?.lastName || ''}`.trim() + " will be responsible for all communication with this attendee until their contact details have been updated in their profile.";
                            }
                            return "";
                          };

                          return (
                          <div>
                              <div className="grid grid-cols-12 gap-4 mb-4">
                                  <div className="col-span-2">
                                      <label 
                                          className="block text-sm font-medium text-slate-700 mb-1"
                                          htmlFor={`relationship-${editingAttendee.attendeeData.attendeeId}`}
                                      >
                                          Relationship *
                                      </label>
                                      <select
                                          id={`relationship-${editingAttendee.attendeeData.attendeeId}`}
                                          value={ladyPartnerFormValues.relationship}
                                          onChange={(e) => handleChange('relationship', e.target.value)}
                                          className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                          required
                                      >
                                          <option value="" disabled>Select...</option>
                                          <option value="Wife">Wife</option>
                                          <option value="Partner">Partner</option>
                                          <option value="Fiancée">Fiancée</option>
                                          <option value="Spouse">Spouse</option>
                                      </select>
                                  </div>
                                  <div className="col-span-2">
                                      <label 
                                          className="block text-sm font-medium text-slate-700 mb-1"
                                          htmlFor={`ladyTitle-${editingAttendee.attendeeData.attendeeId}`}
                                      >
                                          Title *
                                      </label>
                                      <select
                                          id={`ladyTitle-${editingAttendee.attendeeData.attendeeId}`}
                                          value={ladyPartnerFormValues.title}
                                          onChange={(e) => handleChange('title', e.target.value)}
                                          className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                          required
                                      >
                                          <option value="" disabled>Please Select</option>
                                          <option value="Mrs">Mrs</option>
                                          <option value="Ms">Ms</option>
                                          <option value="Miss">Miss</option>
                                          <option value="Dr">Dr</option>
                                          <option value="Rev">Rev</option>
                                          <option value="Prof">Prof</option>
                                          <option value="Hon">Hon</option>
                                          <option value="Lady">Lady</option>
                                          <option value="Madam">Madam</option>
                                          <option value="Dame">Dame</option>
                                      </select>
                                  </div>
                                  <div className="col-span-4">
                                      <label 
                                          className="block text-sm font-medium text-slate-700 mb-1"
                                          htmlFor={`ladyFirstName-${editingAttendee.attendeeData.attendeeId}`}
                                      >
                                          First Name *
                                      </label>
                                      <input
                                          id={`ladyFirstName-${editingAttendee.attendeeData.attendeeId}`}
                                          type="text" 
                                          value={ladyPartnerFormValues.firstName}
                                          onChange={(e) => handleChange('firstName', e.target.value)}
                                          className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                          required
                                      />
                                  </div>
                                  <div className="col-span-4">
                                      <label 
                                          className="block text-sm font-medium text-slate-700 mb-1"
                                          htmlFor={`ladyLastName-${editingAttendee.attendeeData.attendeeId}`}
                                      >
                                          Last Name *
                                      </label>
                                      <input
                                          id={`ladyLastName-${editingAttendee.attendeeData.attendeeId}`}
                                          type="text" 
                                          value={ladyPartnerFormValues.lastName}
                                          onChange={(e) => handleChange('lastName', e.target.value)}
                                          className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                          required
                                      />
                                  </div>
                              </div>
                              <div className="grid grid-cols-12 gap-4 mb-4">
                                  <div className="col-span-4">
                                      <label 
                                          className="block text-sm font-medium text-slate-700 mb-1"
                                          htmlFor={`ladyContactPreference-${editingAttendee.attendeeData.attendeeId}`}
                                      >
                                          Contact *
                                          <div className="relative inline-block ml-1 group align-middle">
                                              <HelpCircle className="h-4 w-4 text-primary cursor-help" />
                                              <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 -translate-y-1 invisible group-hover:visible bg-white text-slate-700 text-xs p-2 rounded shadow-lg w-48 z-10">
                                                  Select how we should contact this person regarding event information
                                              </div>
                                          </div>
                                      </label>
                                      <select
                                          id={`ladyContactPreference-${editingAttendee.attendeeData.attendeeId}`}
                                          name={`ladyContactPreference-${editingAttendee.attendeeData.attendeeId}`}
                                          value={ladyPartnerFormValues.contactPreference}
                                          onChange={(e) => {
                                              const selectedValue = e.target.value;
                                              handleChange('contactPreference', selectedValue);
                                          }}
                                          className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                          required
                                      >
                                          <option value="" disabled>Please Select</option>
                                          <option value="Directly">Directly</option>
                                          <option value="ProvideLater">Provide Later</option>
                                          {/* Dynamic option for related Mason */}
                                          {editingAttendee.attendeeData.relatedAttendeeId && (
                                              <option value="PrimaryAttendee">
                                                  {allStoreAttendees.find(a => a.attendeeId === editingAttendee.attendeeData.relatedAttendeeId)
                                                      ? `${allStoreAttendees.find(a => a.attendeeId === editingAttendee.attendeeData.relatedAttendeeId)?.firstName || ''} ${allStoreAttendees.find(a => a.attendeeId === editingAttendee.attendeeData.relatedAttendeeId)?.lastName || ''}`.trim()
                                                      : 'Related Mason'}
                                              </option>
                                          )}
                                      </select>
                                  </div>
                                  {(ladyPartnerFormValues.contactPreference === 'Directly') && (
                                      <>
                                          <div className="col-span-4">
                                              <label 
                                                  className="block text-sm font-medium text-slate-700 mb-1"
                                                  htmlFor={`ladyMobile-${editingAttendee.attendeeData.attendeeId}`}
                                              >
                                                  Mobile *
                                              </label>
                                              <PhoneInput
                                                  name={`ladyMobile-${editingAttendee.attendeeData.attendeeId}`}
                                                  value={ladyPartnerFormValues.primaryPhone}
                                                  onChange={(value) => handleChange('primaryPhone', value)}
                                                  required
                                              />
                                          </div>
                                          <div className="col-span-4">
                                              <label 
                                                  className="block text-sm font-medium text-slate-700 mb-1"
                                                  htmlFor={`ladyEmail-${editingAttendee.attendeeData.attendeeId}`}
                                              >
                                                  Email Address *
                                              </label>
                                              <input
                                                  id={`ladyEmail-${editingAttendee.attendeeData.attendeeId}`}
                                                  type="email" 
                                                  value={ladyPartnerFormValues.primaryEmail}
                                                  onChange={(e) => handleChange('primaryEmail', e.target.value)}
                                                  className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                                  required
                                                  title="Please enter a valid email address (e.g., user@example.com)"
                                              />
                                          </div>
                                      </>
                                  )}
                                  {(ladyPartnerFormValues.contactPreference && ladyPartnerFormValues.contactPreference !== 'Directly') && (
                                      <div className="col-span-8 flex items-center pl-2">
                                          <ContactConfirmationMessage messageText={getLadyPartnerConfirmationMessage()} />
                                      </div>
                                  )}
                              </div>
                              <div className="mb-4">
                                  <label 
                                      className="block text-sm font-medium text-slate-700 mb-1"
                                      htmlFor={`ladyDietary-${editingAttendee.attendeeData.attendeeId}`}
                                  >
                                      Dietary Requirements
                                  </label>
                                  <input
                                      id={`ladyDietary-${editingAttendee.attendeeData.attendeeId}`}
                                      type="text" 
                                      value={ladyPartnerFormValues.dietaryRequirements}
                                      onChange={(e) => handleChange('dietaryRequirements', e.target.value)}
                                      className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                      placeholder="E.g., vegetarian, gluten-free, allergies"
                                  />
                              </div>
                              <div>
                                  <label 
                                      className="block text-sm font-medium text-slate-700 mb-1"
                                      htmlFor={`ladySpecialNeeds-${editingAttendee.attendeeData.attendeeId}`}
                                  >
                                      Special Needs or Accessibility Requirements
                                  </label>
                                  <textarea
                                      id={`ladySpecialNeeds-${editingAttendee.attendeeData.attendeeId}`}
                                      value={ladyPartnerFormValues.specialNeeds}
                                      onChange={(e) => handleChange('specialNeeds', e.target.value)}
                                      className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                      rows={2}
                                  ></textarea>
                              </div>
                          </div>
                          );
                        })()}
                      
                      {/* Guest Partner Form - Full Featured Implementation with Local State */}
                      {(editingAttendee.attendeeData.attendeeType.toLowerCase() === "guestpartner" || 
                        (editingAttendee.attendeeData.isPartner && editingAttendee.attendeeData.partnerType === 'guest')) && (() => {
                          // Handler for updating both local state and store
                          const handleChange = (field, value) => {
                              // Update local state first for immediate UI response
                              setGuestPartnerFormValues(prev => ({
                                  ...prev,
                                  [field]: value
                              }));
                              
                              // Then update the store
                              updateAttendeeStore(editingAttendee.attendeeData.attendeeId, { [field]: value });
                          };

                          const getGuestPartnerConfirmationMessage = () => {
                            if (guestPartnerFormValues.contactPreference === 'PrimaryAttendee') {
                              const relatedAtt = allStoreAttendees.find((a: UnifiedAttendeeData) => a.attendeeId === editingAttendee.attendeeData.relatedAttendeeId);
                              return `${relatedAtt?.firstName || ''} ${relatedAtt?.lastName || ''}`.trim() + " will be responsible for all communication with this attendee.";
                            }
                            if (guestPartnerFormValues.contactPreference === 'ProvideLater') {
                              const relatedAtt = allStoreAttendees.find((a: UnifiedAttendeeData) => a.attendeeId === editingAttendee.attendeeData.relatedAttendeeId);
                              return `${relatedAtt?.firstName || ''} ${relatedAtt?.lastName || ''}`.trim() + " will be responsible for all communication with this attendee until their contact details have been updated in their profile.";
                            }
                            return "";
                          };

                          return (
                          <div>
                              <div className="grid grid-cols-12 gap-4 mb-4">
                                  <div className="col-span-2">
                                      <label 
                                          className="block text-sm font-medium text-slate-700 mb-1"
                                          htmlFor={`relationship-${editingAttendee.attendeeData.attendeeId}`}
                                      >
                                          Relationship *
                                      </label>
                                      <select
                                          id={`relationship-${editingAttendee.attendeeData.attendeeId}`}
                                          value={guestPartnerFormValues.relationship}
                                          onChange={(e) => handleChange('relationship', e.target.value)}
                                          className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                          required
                                      >
                                          <option value="" disabled>Select...</option>
                                          <option value="Wife">Wife</option>
                                          <option value="Husband">Husband</option>
                                          <option value="Partner">Partner</option>
                                          <option value="Spouse">Spouse</option>
                                      </select>
                                  </div>
                                  <div className="col-span-2">
                                      <label 
                                          className="block text-sm font-medium text-slate-700 mb-1"
                                          htmlFor={`guestPartnerTitle-${editingAttendee.attendeeData.attendeeId}`}
                                      >
                                          Title *
                                      </label>
                                      <select
                                          id={`guestPartnerTitle-${editingAttendee.attendeeData.attendeeId}`}
                                          value={guestPartnerFormValues.title}
                                          onChange={(e) => handleChange('title', e.target.value)}
                                          className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                          required
                                      >
                                          <option value="" disabled>Please Select</option>
                                          <option value="Mr">Mr</option>
                                          <option value="Mrs">Mrs</option>
                                          <option value="Ms">Ms</option>
                                          <option value="Miss">Miss</option>
                                          <option value="Dr">Dr</option>
                                          <option value="Rev">Rev</option>
                                          <option value="Prof">Prof</option>
                                      </select>
                                  </div>
                                  <div className="col-span-4">
                                      <label 
                                          className="block text-sm font-medium text-slate-700 mb-1"
                                          htmlFor={`guestPartnerFirstName-${editingAttendee.attendeeData.attendeeId}`}
                                      >
                                          First Name *
                                      </label>
                                      <input
                                          id={`guestPartnerFirstName-${editingAttendee.attendeeData.attendeeId}`}
                                          type="text" 
                                          value={guestPartnerFormValues.firstName}
                                          onChange={(e) => handleChange('firstName', e.target.value)}
                                          className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                          required
                                      />
                                  </div>
                                  <div className="col-span-4">
                                      <label 
                                          className="block text-sm font-medium text-slate-700 mb-1"
                                          htmlFor={`guestPartnerLastName-${editingAttendee.attendeeData.attendeeId}`}
                                      >
                                          Last Name *
                                      </label>
                                      <input
                                          id={`guestPartnerLastName-${editingAttendee.attendeeData.attendeeId}`}
                                          type="text" 
                                          value={guestPartnerFormValues.lastName}
                                          onChange={(e) => handleChange('lastName', e.target.value)}
                                          className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                          required
                                      />
                                  </div>
                              </div>
                              <div className="grid grid-cols-12 gap-4 mb-4">
                                  <div className="col-span-4">
                                      <label 
                                          className="block text-sm font-medium text-slate-700 mb-1"
                                          htmlFor={`guestPartnerContactPreference-${editingAttendee.attendeeData.attendeeId}`}
                                      >
                                          Contact *
                                          <div className="relative inline-block ml-1 group align-middle">
                                              <HelpCircle className="h-4 w-4 text-primary cursor-help" />
                                              <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 -translate-y-1 invisible group-hover:visible bg-white text-slate-700 text-xs p-2 rounded shadow-lg w-48 z-10">
                                                  Select how we should contact this person regarding event information
                                              </div>
                                          </div>
                                      </label>
                                      <select
                                          id={`guestPartnerContactPreference-${editingAttendee.attendeeData.attendeeId}`}
                                          name={`guestPartnerContactPreference-${editingAttendee.attendeeData.attendeeId}`}
                                          value={guestPartnerFormValues.contactPreference}
                                          onChange={(e) => {
                                              const selectedValue = e.target.value;
                                              handleChange('contactPreference', selectedValue);
                                          }}
                                          className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                          required
                                      >
                                          <option value="" disabled>Please Select</option>
                                          <option value="Directly">Directly</option>
                                          <option value="ProvideLater">Provide Later</option>
                                          {/* Dynamic option for related Guest */}
                                          {editingAttendee.attendeeData.relatedAttendeeId && (
                                              <option value="PrimaryAttendee">
                                                  {allStoreAttendees.find(a => a.attendeeId === editingAttendee.attendeeData.relatedAttendeeId)
                                                      ? `${allStoreAttendees.find(a => a.attendeeId === editingAttendee.attendeeData.relatedAttendeeId)?.firstName || ''} ${allStoreAttendees.find(a => a.attendeeId === editingAttendee.attendeeData.relatedAttendeeId)?.lastName || ''}`.trim()
                                                      : 'Related Guest'}
                                              </option>
                                          )}
                                      </select>
                                  </div>
                                  {(guestPartnerFormValues.contactPreference === 'Directly') && (
                                      <>
                                          <div className="col-span-4">
                                              <label 
                                                  className="block text-sm font-medium text-slate-700 mb-1"
                                                  htmlFor={`guestPartnerMobile-${editingAttendee.attendeeData.attendeeId}`}
                                              >
                                                  Mobile *
                                              </label>
                                              <PhoneInput
                                                  name={`guestPartnerMobile-${editingAttendee.attendeeData.attendeeId}`}
                                                  value={guestPartnerFormValues.primaryPhone}
                                                  onChange={(value) => handleChange('primaryPhone', value)}
                                                  required
                                              />
                                          </div>
                                          <div className="col-span-4">
                                              <label 
                                                  className="block text-sm font-medium text-slate-700 mb-1"
                                                  htmlFor={`guestPartnerEmail-${editingAttendee.attendeeData.attendeeId}`}
                                              >
                                                  Email Address *
                                              </label>
                                              <input
                                                  id={`guestPartnerEmail-${editingAttendee.attendeeData.attendeeId}`}
                                                  type="email" 
                                                  value={guestPartnerFormValues.primaryEmail}
                                                  onChange={(e) => handleChange('primaryEmail', e.target.value)}
                                                  className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                                  required
                                                  title="Please enter a valid email address (e.g., user@example.com)"
                                              />
                                          </div>
                                      </>
                                  )}
                                  {(guestPartnerFormValues.contactPreference && guestPartnerFormValues.contactPreference !== 'Directly') && (
                                      <div className="col-span-8 flex items-center pl-2">
                                          <ContactConfirmationMessage messageText={getGuestPartnerConfirmationMessage()} />
                                      </div>
                                  )}
                              </div>
                              <div className="mb-4">
                                  <label 
                                      className="block text-sm font-medium text-slate-700 mb-1"
                                      htmlFor={`guestPartnerDietary-${editingAttendee.attendeeData.attendeeId}`}
                                  >
                                      Dietary Requirements
                                  </label>
                                  <input
                                      id={`guestPartnerDietary-${editingAttendee.attendeeData.attendeeId}`}
                                      type="text" 
                                      value={guestPartnerFormValues.dietaryRequirements}
                                      onChange={(e) => handleChange('dietaryRequirements', e.target.value)}
                                      className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                      placeholder="E.g., vegetarian, gluten-free, allergies"
                                  />
                              </div>
                              <div>
                                  <label 
                                      className="block text-sm font-medium text-slate-700 mb-1"
                                      htmlFor={`guestPartnerSpecialNeeds-${editingAttendee.attendeeData.attendeeId}`}
                                  >
                                      Special Needs / Seating Request
                                  </label>
                                  <textarea
                                      id={`guestPartnerSpecialNeeds-${editingAttendee.attendeeData.attendeeId}`}
                                      value={guestPartnerFormValues.specialNeeds}
                                      onChange={(e) => handleChange('specialNeeds', e.target.value)}
                                      className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
                                      rows={2}
                                  ></textarea>
                              </div>
                          </div>
                          );
                        })()}
                  </div>
              </DialogContent>
          </Dialog>
      )}

      <AlertDialog open={isRemoveConfirmOpen} onOpenChange={setIsRemoveConfirmOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action will remove {editingAttendee ? `${editingAttendee.attendeeData.firstName} ${editingAttendee.attendeeData.lastName}` : (removingAttendeeId ? `the selected attendee` : 'this attendee')} and their selected tickets. This cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleConfirmRemoveAttendee} className="bg-red-600 hover:bg-red-700">
              Remove Attendee
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

    </div>
  )
}
