-- Copy and paste this entire SQL script into the Supabase SQL Editor 
-- to create the necessary tables for the payment process

-- Create necessary enum types with proper error handling
DO $$
BEGIN
    -- Create payment_status enum if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'payment_status') THEN
        CREATE TYPE public.payment_status AS ENUM (
            'pending', 'completed', 'failed', 'refunded', 'partially_refunded', 'cancelled', 'expired'
        );
    END IF;

    -- Create registration_type enum if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'registration_type') THEN
        CREATE TYPE public.registration_type AS ENUM (
            'Individuals', 'Groups', 'Officials'
        );
    END IF;
END
$$;

-- Create the registrations table
CREATE TABLE IF NOT EXISTS public.registrations (
  registration_id uuid not null,
  customer_id uuid null,
  event_id uuid null,
  registration_date timestamp with time zone null,
  status character varying(50) null,
  total_amount_paid numeric null,
  total_price_paid numeric null,
  payment_status public.payment_status null default 'pending'::payment_status,
  agree_to_terms boolean null default false,
  stripe_payment_intent_id text null,
  primary_attendee_id uuid null,
  registration_type public.registration_type null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  registration_data jsonb[] null,
  constraint registrations_pkey primary key (registration_id)
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_registrations_customer ON public.registrations USING btree (customer_id);
CREATE INDEX IF NOT EXISTS idx_registrations_event ON public.registrations USING btree (event_id);
CREATE INDEX IF NOT EXISTS idx_registrations_created_at ON public.registrations USING btree (created_at);
CREATE INDEX IF NOT EXISTS idx_registrations_payment_status ON public.registrations USING btree (payment_status);

-- Create the tickets table (needed for the registrations flow)
CREATE TABLE IF NOT EXISTS public.tickets (
  id uuid PRIMARY KEY,
  registration_id uuid REFERENCES public.registrations(registration_id),
  ticket_type_id uuid,
  event_id uuid,
  attendee_id uuid,
  ticket_price numeric null,
  ticket_status character varying(50) null,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_partner_ticket boolean DEFAULT false
);

CREATE INDEX IF NOT EXISTS idx_tickets_registration ON public.tickets USING btree (registration_id); 